// Code generated by MockGen. DO NOT EDIT.
// Source: /home/edreed/go/src/github.com/edreed/azure-permissions-checker/vendor/github.com/Azure/azure-sdk-for-go/services/authorization/mgmt/2015-07-01/authorization/authorizationapi/interfaces.go

// Package mockauthorizationapi is a generated GoMock package.
package mockauthorizationapi

import (
	context "context"
	reflect "reflect"

	authorization "github.com/Azure/azure-sdk-for-go/services/authorization/mgmt/2015-07-01/authorization"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionsClientAPI is a mock of PermissionsClientAPI interface.
type MockPermissionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsClientAPIMockRecorder
}

// MockPermissionsClientAPIMockRecorder is the mock recorder for MockPermissionsClientAPI.
type MockPermissionsClientAPIMockRecorder struct {
	mock *MockPermissionsClientAPI
}

// NewMockPermissionsClientAPI creates a new mock instance.
func NewMockPermissionsClientAPI(ctrl *gomock.Controller) *MockPermissionsClientAPI {
	mock := &MockPermissionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockPermissionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionsClientAPI) EXPECT() *MockPermissionsClientAPIMockRecorder {
	return m.recorder
}

// ListForResource mocks base method.
func (m *MockPermissionsClientAPI) ListForResource(ctx context.Context, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName string) (authorization.PermissionGetResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResource", ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	ret0, _ := ret[0].(authorization.PermissionGetResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResource indicates an expected call of ListForResource.
func (mr *MockPermissionsClientAPIMockRecorder) ListForResource(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResource", reflect.TypeOf((*MockPermissionsClientAPI)(nil).ListForResource), ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
}

// ListForResourceComplete mocks base method.
func (m *MockPermissionsClientAPI) ListForResourceComplete(ctx context.Context, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName string) (authorization.PermissionGetResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceComplete", ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	ret0, _ := ret[0].(authorization.PermissionGetResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceComplete indicates an expected call of ListForResourceComplete.
func (mr *MockPermissionsClientAPIMockRecorder) ListForResourceComplete(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceComplete", reflect.TypeOf((*MockPermissionsClientAPI)(nil).ListForResourceComplete), ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
}

// ListForResourceGroup mocks base method.
func (m *MockPermissionsClientAPI) ListForResourceGroup(ctx context.Context, resourceGroupName string) (authorization.PermissionGetResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(authorization.PermissionGetResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockPermissionsClientAPIMockRecorder) ListForResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockPermissionsClientAPI)(nil).ListForResourceGroup), ctx, resourceGroupName)
}

// ListForResourceGroupComplete mocks base method.
func (m *MockPermissionsClientAPI) ListForResourceGroupComplete(ctx context.Context, resourceGroupName string) (authorization.PermissionGetResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(authorization.PermissionGetResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroupComplete indicates an expected call of ListForResourceGroupComplete.
func (mr *MockPermissionsClientAPIMockRecorder) ListForResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroupComplete", reflect.TypeOf((*MockPermissionsClientAPI)(nil).ListForResourceGroupComplete), ctx, resourceGroupName)
}

// MockRoleDefinitionsClientAPI is a mock of RoleDefinitionsClientAPI interface.
type MockRoleDefinitionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoleDefinitionsClientAPIMockRecorder
}

// MockRoleDefinitionsClientAPIMockRecorder is the mock recorder for MockRoleDefinitionsClientAPI.
type MockRoleDefinitionsClientAPIMockRecorder struct {
	mock *MockRoleDefinitionsClientAPI
}

// NewMockRoleDefinitionsClientAPI creates a new mock instance.
func NewMockRoleDefinitionsClientAPI(ctrl *gomock.Controller) *MockRoleDefinitionsClientAPI {
	mock := &MockRoleDefinitionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockRoleDefinitionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleDefinitionsClientAPI) EXPECT() *MockRoleDefinitionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockRoleDefinitionsClientAPI) CreateOrUpdate(ctx context.Context, scope, roleDefinitionID string, roleDefinition authorization.RoleDefinition) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, scope, roleDefinitionID, roleDefinition)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockRoleDefinitionsClientAPIMockRecorder) CreateOrUpdate(ctx, scope, roleDefinitionID, roleDefinition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRoleDefinitionsClientAPI)(nil).CreateOrUpdate), ctx, scope, roleDefinitionID, roleDefinition)
}

// Delete mocks base method.
func (m *MockRoleDefinitionsClientAPI) Delete(ctx context.Context, scope, roleDefinitionID string) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scope, roleDefinitionID)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleDefinitionsClientAPIMockRecorder) Delete(ctx, scope, roleDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleDefinitionsClientAPI)(nil).Delete), ctx, scope, roleDefinitionID)
}

// Get mocks base method.
func (m *MockRoleDefinitionsClientAPI) Get(ctx context.Context, scope, roleDefinitionID string) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, scope, roleDefinitionID)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleDefinitionsClientAPIMockRecorder) Get(ctx, scope, roleDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleDefinitionsClientAPI)(nil).Get), ctx, scope, roleDefinitionID)
}

// GetByID mocks base method.
func (m *MockRoleDefinitionsClientAPI) GetByID(ctx context.Context, roleDefinitionID string) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, roleDefinitionID)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRoleDefinitionsClientAPIMockRecorder) GetByID(ctx, roleDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRoleDefinitionsClientAPI)(nil).GetByID), ctx, roleDefinitionID)
}

// List mocks base method.
func (m *MockRoleDefinitionsClientAPI) List(ctx context.Context, scope, filter string) (authorization.RoleDefinitionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, scope, filter)
	ret0, _ := ret[0].(authorization.RoleDefinitionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleDefinitionsClientAPIMockRecorder) List(ctx, scope, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleDefinitionsClientAPI)(nil).List), ctx, scope, filter)
}

// ListComplete mocks base method.
func (m *MockRoleDefinitionsClientAPI) ListComplete(ctx context.Context, scope, filter string) (authorization.RoleDefinitionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, scope, filter)
	ret0, _ := ret[0].(authorization.RoleDefinitionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockRoleDefinitionsClientAPIMockRecorder) ListComplete(ctx, scope, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockRoleDefinitionsClientAPI)(nil).ListComplete), ctx, scope, filter)
}

// MockProviderOperationsMetadataClientAPI is a mock of ProviderOperationsMetadataClientAPI interface.
type MockProviderOperationsMetadataClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProviderOperationsMetadataClientAPIMockRecorder
}

// MockProviderOperationsMetadataClientAPIMockRecorder is the mock recorder for MockProviderOperationsMetadataClientAPI.
type MockProviderOperationsMetadataClientAPIMockRecorder struct {
	mock *MockProviderOperationsMetadataClientAPI
}

// NewMockProviderOperationsMetadataClientAPI creates a new mock instance.
func NewMockProviderOperationsMetadataClientAPI(ctrl *gomock.Controller) *MockProviderOperationsMetadataClientAPI {
	mock := &MockProviderOperationsMetadataClientAPI{ctrl: ctrl}
	mock.recorder = &MockProviderOperationsMetadataClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderOperationsMetadataClientAPI) EXPECT() *MockProviderOperationsMetadataClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProviderOperationsMetadataClientAPI) Get(ctx context.Context, resourceProviderNamespace, APIVersion, expand string) (authorization.ProviderOperationsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceProviderNamespace, APIVersion, expand)
	ret0, _ := ret[0].(authorization.ProviderOperationsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProviderOperationsMetadataClientAPIMockRecorder) Get(ctx, resourceProviderNamespace, APIVersion, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProviderOperationsMetadataClientAPI)(nil).Get), ctx, resourceProviderNamespace, APIVersion, expand)
}

// List mocks base method.
func (m *MockProviderOperationsMetadataClientAPI) List(ctx context.Context, APIVersion, expand string) (authorization.ProviderOperationsMetadataListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, APIVersion, expand)
	ret0, _ := ret[0].(authorization.ProviderOperationsMetadataListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProviderOperationsMetadataClientAPIMockRecorder) List(ctx, APIVersion, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProviderOperationsMetadataClientAPI)(nil).List), ctx, APIVersion, expand)
}

// ListComplete mocks base method.
func (m *MockProviderOperationsMetadataClientAPI) ListComplete(ctx context.Context, APIVersion, expand string) (authorization.ProviderOperationsMetadataListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, APIVersion, expand)
	ret0, _ := ret[0].(authorization.ProviderOperationsMetadataListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockProviderOperationsMetadataClientAPIMockRecorder) ListComplete(ctx, APIVersion, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockProviderOperationsMetadataClientAPI)(nil).ListComplete), ctx, APIVersion, expand)
}

// MockGlobalAdministratorClientAPI is a mock of GlobalAdministratorClientAPI interface.
type MockGlobalAdministratorClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalAdministratorClientAPIMockRecorder
}

// MockGlobalAdministratorClientAPIMockRecorder is the mock recorder for MockGlobalAdministratorClientAPI.
type MockGlobalAdministratorClientAPIMockRecorder struct {
	mock *MockGlobalAdministratorClientAPI
}

// NewMockGlobalAdministratorClientAPI creates a new mock instance.
func NewMockGlobalAdministratorClientAPI(ctrl *gomock.Controller) *MockGlobalAdministratorClientAPI {
	mock := &MockGlobalAdministratorClientAPI{ctrl: ctrl}
	mock.recorder = &MockGlobalAdministratorClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalAdministratorClientAPI) EXPECT() *MockGlobalAdministratorClientAPIMockRecorder {
	return m.recorder
}

// ElevateAccess mocks base method.
func (m *MockGlobalAdministratorClientAPI) ElevateAccess(ctx context.Context) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ElevateAccess", ctx)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ElevateAccess indicates an expected call of ElevateAccess.
func (mr *MockGlobalAdministratorClientAPIMockRecorder) ElevateAccess(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ElevateAccess", reflect.TypeOf((*MockGlobalAdministratorClientAPI)(nil).ElevateAccess), ctx)
}

// MockRoleAssignmentsClientAPI is a mock of RoleAssignmentsClientAPI interface.
type MockRoleAssignmentsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoleAssignmentsClientAPIMockRecorder
}

// MockRoleAssignmentsClientAPIMockRecorder is the mock recorder for MockRoleAssignmentsClientAPI.
type MockRoleAssignmentsClientAPIMockRecorder struct {
	mock *MockRoleAssignmentsClientAPI
}

// NewMockRoleAssignmentsClientAPI creates a new mock instance.
func NewMockRoleAssignmentsClientAPI(ctrl *gomock.Controller) *MockRoleAssignmentsClientAPI {
	mock := &MockRoleAssignmentsClientAPI{ctrl: ctrl}
	mock.recorder = &MockRoleAssignmentsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleAssignmentsClientAPI) EXPECT() *MockRoleAssignmentsClientAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleAssignmentsClientAPI) Create(ctx context.Context, scope, roleAssignmentName string, parameters authorization.RoleAssignmentCreateParameters) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scope, roleAssignmentName, parameters)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) Create(ctx, scope, roleAssignmentName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).Create), ctx, scope, roleAssignmentName, parameters)
}

// CreateByID mocks base method.
func (m *MockRoleAssignmentsClientAPI) CreateByID(ctx context.Context, roleAssignmentID string, parameters authorization.RoleAssignmentCreateParameters) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByID", ctx, roleAssignmentID, parameters)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByID indicates an expected call of CreateByID.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) CreateByID(ctx, roleAssignmentID, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByID", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).CreateByID), ctx, roleAssignmentID, parameters)
}

// Delete mocks base method.
func (m *MockRoleAssignmentsClientAPI) Delete(ctx context.Context, scope, roleAssignmentName string) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scope, roleAssignmentName)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) Delete(ctx, scope, roleAssignmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).Delete), ctx, scope, roleAssignmentName)
}

// DeleteByID mocks base method.
func (m *MockRoleAssignmentsClientAPI) DeleteByID(ctx context.Context, roleAssignmentID string) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, roleAssignmentID)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) DeleteByID(ctx, roleAssignmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).DeleteByID), ctx, roleAssignmentID)
}

// Get mocks base method.
func (m *MockRoleAssignmentsClientAPI) Get(ctx context.Context, scope, roleAssignmentName string) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, scope, roleAssignmentName)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) Get(ctx, scope, roleAssignmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).Get), ctx, scope, roleAssignmentName)
}

// GetByID mocks base method.
func (m *MockRoleAssignmentsClientAPI) GetByID(ctx context.Context, roleAssignmentID string) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, roleAssignmentID)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) GetByID(ctx, roleAssignmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).GetByID), ctx, roleAssignmentID)
}

// List mocks base method.
func (m *MockRoleAssignmentsClientAPI) List(ctx context.Context, filter string) (authorization.RoleAssignmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).List), ctx, filter)
}

// ListComplete mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListComplete(ctx context.Context, filter string) (authorization.RoleAssignmentListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListComplete(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListComplete), ctx, filter)
}

// ListForResource mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListForResource(ctx context.Context, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter string) (authorization.RoleAssignmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResource", ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResource indicates an expected call of ListForResource.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListForResource(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResource", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListForResource), ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
}

// ListForResourceComplete mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListForResourceComplete(ctx context.Context, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter string) (authorization.RoleAssignmentListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceComplete", ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceComplete indicates an expected call of ListForResourceComplete.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListForResourceComplete(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceComplete", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListForResourceComplete), ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
}

// ListForResourceGroup mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListForResourceGroup(ctx context.Context, resourceGroupName, filter string) (authorization.RoleAssignmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", ctx, resourceGroupName, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListForResourceGroup(ctx, resourceGroupName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListForResourceGroup), ctx, resourceGroupName, filter)
}

// ListForResourceGroupComplete mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListForResourceGroupComplete(ctx context.Context, resourceGroupName, filter string) (authorization.RoleAssignmentListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroupComplete", ctx, resourceGroupName, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroupComplete indicates an expected call of ListForResourceGroupComplete.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListForResourceGroupComplete(ctx, resourceGroupName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroupComplete", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListForResourceGroupComplete), ctx, resourceGroupName, filter)
}

// ListForScope mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListForScope(ctx context.Context, scope, filter string) (authorization.RoleAssignmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForScope", ctx, scope, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForScope indicates an expected call of ListForScope.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListForScope(ctx, scope, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForScope", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListForScope), ctx, scope, filter)
}

// ListForScopeComplete mocks base method.
func (m *MockRoleAssignmentsClientAPI) ListForScopeComplete(ctx context.Context, scope, filter string) (authorization.RoleAssignmentListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForScopeComplete", ctx, scope, filter)
	ret0, _ := ret[0].(authorization.RoleAssignmentListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForScopeComplete indicates an expected call of ListForScopeComplete.
func (mr *MockRoleAssignmentsClientAPIMockRecorder) ListForScopeComplete(ctx, scope, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForScopeComplete", reflect.TypeOf((*MockRoleAssignmentsClientAPI)(nil).ListForScopeComplete), ctx, scope, filter)
}

// MockClassicAdministratorsClientAPI is a mock of ClassicAdministratorsClientAPI interface.
type MockClassicAdministratorsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClassicAdministratorsClientAPIMockRecorder
}

// MockClassicAdministratorsClientAPIMockRecorder is the mock recorder for MockClassicAdministratorsClientAPI.
type MockClassicAdministratorsClientAPIMockRecorder struct {
	mock *MockClassicAdministratorsClientAPI
}

// NewMockClassicAdministratorsClientAPI creates a new mock instance.
func NewMockClassicAdministratorsClientAPI(ctrl *gomock.Controller) *MockClassicAdministratorsClientAPI {
	mock := &MockClassicAdministratorsClientAPI{ctrl: ctrl}
	mock.recorder = &MockClassicAdministratorsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassicAdministratorsClientAPI) EXPECT() *MockClassicAdministratorsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockClassicAdministratorsClientAPI) List(ctx context.Context) (authorization.ClassicAdministratorListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(authorization.ClassicAdministratorListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClassicAdministratorsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClassicAdministratorsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method.
func (m *MockClassicAdministratorsClientAPI) ListComplete(ctx context.Context) (authorization.ClassicAdministratorListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(authorization.ClassicAdministratorListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockClassicAdministratorsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockClassicAdministratorsClientAPI)(nil).ListComplete), ctx)
}
